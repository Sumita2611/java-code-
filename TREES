// AMOUNT OF TIME FOR BINARY TREE TO BE INFECTED
class Solution {
    private static int findMaxDistance(Map<TreeNode,TreeNode> mp,TreeNode target){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(target);
        HashMap<TreeNode,Integer> vis = new HashMap<>();
        vis.put(target,1);
        int time = 0;

        while(!q.isEmpty()){
            int n = q.size();
            int flag = 0;

            for(int i = 0;i < n;i++){
                TreeNode node = q.poll();
            //burn left
                if(node.left != null && vis.get(node.left) == null){
                    flag = 1;
                    vis.put(node.left,1);
                    q.offer(node.left);
                }
                  //burn right
                if(node.right != null && vis.get(node.right) == null){
                    flag = 1;
                    vis.put(node.right,1);
                    q.offer(node.right);
                }

                //burn top
                if(mp.get(node) != null && vis.get(mp.get(node)) == null){ // parent exists and in vis,it is not marked
                    flag = 1; // for burning
                    vis.put(mp.get(node),1);
                    q.offer(mp.get(node));
                }
            }
            if(flag == 1){
                time++;
            }
        }
        return time;
    }

    private static TreeNode bfsToMapParents(TreeNode root,Map<TreeNode,TreeNode> mp,int start){
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);

        TreeNode res = new TreeNode(-1);//store address of start
        while(!q.isEmpty()){
            TreeNode node = q.poll();
            if(node.val == start){
                res = node;
            }

            if(node.left != null){
                mp.put(node.left,node);//parent mark
                q.offer(node.left);
            }
            if(node.right != null){
                mp.put(node.right,node);
                q.offer(node.right);
            }
        }
        return res;
    }
    public int amountOfTime(TreeNode root, int start) {
        Map<TreeNode,TreeNode> mp = new HashMap<>();
        TreeNode target = bfsToMapParents(root,mp,start); // mapping parents as well as returns the target node
        int totalTime = findMaxDistance(mp,target);
        return totalTime;
    }
}



// COUNT COMPLETE TREE NODES
class Solution {
    static int leftHeight(TreeNode root){
        int height = 0;
        while(root.left != null){
            height++;
            root = root.left;
        }
        return height;
    }
     static int rightHeight(TreeNode root){
        int height = 0;
        while(root.right != null){
            height++;
            root = root.right;
        }
        return height;
    }
    public int countNodes(TreeNode root) {
        if(root == null){
            return 0;
        }
        int lh = leftHeight(root);
        int rh = rightHeight(root);

        if(lh == rh){
            return (2<<(lh)) - 1;
        }
        return 1 + countNodes(root.left) + countNodes(root.right);
    }
}
